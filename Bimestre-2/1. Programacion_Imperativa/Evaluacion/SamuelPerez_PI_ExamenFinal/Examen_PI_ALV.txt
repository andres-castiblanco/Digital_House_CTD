// Examen final de Programación imperactiva - Anderson Leal Velez -C2

// Ejercicio 1: Crear una función que reciba el array por parametro y retorne un nuevo array con los autos cuyo modelo sea mayor o igual a 2020.

const autos = [
  {
    marca: "Toyota",
    modelo: 2022,
    color: "rojo",
  },
  {
    marca: "Renault",
    modelo: 2015,
    color: "gris",
  },
  {
    marca: "Peugeot",
    modelo: 2017,
    color: "rojo",
  },
  {
    marca: "Fiat",
    modelo: 2021,
    color: "negro",
  },
];

const filtrarAutos = (arr) => {
  let autosFiltrados = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].modelo >= 2020) {
      autosFiltrados.push(arr[i]);
    }
  }
  return autosFiltrados;
};

console.log(
  "---------------------------------------- Ejercicio 1 ----------------------------------------"
);
let autosFiltrados = filtrarAutos(autos);
console.log(autosFiltrados);

// Ejercicio 2: Dado el siguiente array de objetos ordenarlo de forma descendente en base a la notaPromedio

let estudiantes = [
  {
    nombre: "juan",
    activo: true,
    notaPromedio: 5,
  },
  {
    nombre: "maria",
    activo: false,
    notaPromedio: 3,
  },
  {
    nombre: "florencia",
    activo: true,
    notaPromedio: 9,
  },
  {
    nombre: "carlos",
    activo: false,
    notaPromedio: 8,
  },
  {
    nombre: "jose",
    activo: true,
    notaPromedio: 6,
  },
];

const ordenar = (arr) => {
  let estudiantePaso = {};
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length - 1; j++) {
      if (arr[j].notaPromedio < arr[j + 1].notaPromedio) {
        estudiantePaso = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = estudiantePaso;
      }
    }
  }
};

console.log(
  "---------------------------------------- Ejercicio 2 ----------------------------------------"
);
ordenar(estudiantes);
console.log(estudiantes);

// Dada la siguiente matriz, realizar los siguientes ejercicios.

let matrix = [
  [1, 4, 7, 4],
  [5, 7, 6, 2],
  [6, 2, 3, 3],
  [2, 6, 8, 1],
];

// 1. Crear una función que reciba por parámetros la matriz y la posición de una columna determinada.
// La función debe retornar un arreglo con todos los elementos  de esa columna.

const extraerColumna = (matri, col) => {
  let colExtraida = [];
  if (matri.length - 1 >= col) {
    for (let i = 0; i < matri.length; i++) {
      colExtraida.push(matri[i][col]);
    }
    return colExtraida;
  } else {
    console.log(
      "La columna especificada excede la cantidad de columnas de la matriz ingresada."
    );
  }
};

console.log(
  "---------------------------------------- Ejercicio 3.1 ----------------------------------------"
);
colExtraida = extraerColumna(matrix, 1);
console.log(colExtraida === undefined ? "No retorno" : colExtraida);

// 2. Crear una función que reciba por parámetro la matriz y cambie todos los elementos impares de la matriz por un número 0 (cero)

const imparCero = (matri) => {
  for (let i = 0; i < matri.length; i++) {
    for (let j = 0; j < matri[i].length; j++) {
      if (matri[i][j] % 2 !== 0) {
        matri[i][j] = 0;
      }
    }
  }
};

console.log(
  "---------------------------------------- Ejercicio 3.2 ----------------------------------------"
);
imparCero(matrix);
console.log(matrix);
